package tgbot

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"stroy-svaya/internal/model"
	bm "stroy-svaya/internal/tgbot/botmenu"
	"stroy-svaya/internal/tgbot/webservice"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type pileRange struct {
	from model.PileDrivingRecordLine
	to   model.PileDrivingRecordLine
}

type UserState struct {
	projectID   int
	pileFieldID int
	user        model.User
	pdrRec      model.PileDrivingRecordLine
	pdrRange    pileRange
	menu        bm.DynamicMenu
	userName    string
	waitingFor  string
}

type TgBot struct {
	bot         *tgbotapi.BotAPI
	userStates  map[int64]*UserState
	ws          *webservice.WebService
	debugChatId int64
}

func NewTgBot() *TgBot {
	tb := &TgBot{}
	tb.ws = webservice.NewWebService("")
	tb.userStates = make(map[int64]*UserState)
	return tb
}

func (b *TgBot) Run() error {
	var err error
	err = godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	tg_token := os.Getenv("TG_TOKEN")

	b.bot, err = tgbotapi.NewBotAPI(tg_token)
	if err != nil {
		log.Panic(err)
	}
	b.setDebug(true)
	log.Printf("Authorized on account %s", b.bot.Self.UserName)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)

	for update := range updates {
		switch true {
		case update.Message != nil:
			chatID := update.Message.Chat.ID
			text := update.Message.Text
			b.getUserState(chatID, update.Message.From)
			b.processCommand(chatID, text)
		case update.CallbackQuery != nil:
			callback := update.CallbackQuery
			chatID := callback.Message.Chat.ID
			data := update.CallbackQuery.Data
			b.getUserState(chatID, callback.From)
			if data != bm.PilesSendExcel {
				b.processCallbackQuery(chatID, data)
			} else {
				b.processCallbackQueryWithAlert(chatID, data, callback)
			}
		default:
			continue
		}
	}
	return nil
}

func (b *TgBot) showPilesMenu(chatID int64) {
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å —Å–≤–∞—é –ø–æ –Ω–æ–º–µ—Ä—É", bm.PileGetByNumber),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üî¢ –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —Å–≤–∞–π", bm.PileOpsInsertRange),
		),
		tgbotapi.NewInlineKeyboardRow(
			//tgbotapi.NewInlineKeyboardButtonData("üîç –í—Å–µ —Å–≤–∞–∏", bm.PilesAll),
			tgbotapi.NewInlineKeyboardButtonData("–í—Å–µ —Å–≤–∞–∏", bm.PilesAll),
			tgbotapi.NewInlineKeyboardButtonData("–ù–µ–∑–∞–±–∏—Ç—ã–µ", bm.PilesNew),
			tgbotapi.NewInlineKeyboardButtonData("–ë–µ–∑ –§–û–í–ì", bm.PilesNoFPH),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–±–∏—Ç—ã–µ —Å–µ–≥–æ–¥–Ω—è", bm.PilesLoggedToday),
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–±–∏—Ç—ã–µ –≤—á–µ—Ä–∞", bm.PilesLoggedYesterday),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì§ –ü–æ–ª—É—á–∏—Ç—å Excel", bm.PilesSendExcel),
		),
	)
	b.newInlineKb(chatID, &kb, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∂—É—Ä–Ω–∞–ª –∑–∞–±–∏–≤–∫–∏ —Å–≤–∞–π!\n")
}

func (b *TgBot) showPileOperationsMenu(chatID int64) {
	baseRows := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("–í–≤–æ–¥/–∏–∑–º. –§–û–í–ì", bm.PileOpsUpdateFPH),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", bm.PileOpsBack),
		},
	}
	if b.userStates[chatID].pdrRec.Status == 10 {
		extraRow := []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª", bm.PileOpsInsert),
		}
		baseRows = append([][]tgbotapi.InlineKeyboardButton{extraRow}, baseRows...)
	}
	kb := tgbotapi.NewInlineKeyboardMarkup(baseRows...)
	b.newInlineKb(chatID, &kb, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
}

func (b *TgBot) showPileStartDateMenu(chatID int64) {
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", bm.PileOpsStartDateToday),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í—á–µ—Ä–∞", bm.PileOpsStartDateYesterday),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", bm.PileOpsBack),
		),
	)
	b.newInlineKb(chatID, &kb, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–±–∏–≤–∫–∏ —Å–≤–∞–∏:")
}

func (b *TgBot) showAfterUpdatePdrLineMenu(chatID int64) {
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", bm.PileOpsBack),
		),
	)
	b.newInlineKb(chatID, &kb, b.makePileInfoText(chatID, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∂—É—Ä–Ω–∞–ª:"))
}

func (b *TgBot) startPileSelection(chatID int64, mode string) {
	piles, err := b.getPilesByFilter(chatID, mode)
	if err != nil {
		panic(err)
	}
	if len(piles) == 0 {
		b.sendMessage(chatID, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–≤–∞–∏ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
		return
	}
	b.userStates[chatID].menu = *bm.NewDynamicMenu(piles)
	b.makePileSelectionMenu(chatID, "")
	b.userStates[chatID].waitingFor = bm.WaitPileNumber
}

func (b *TgBot) getPilesByFilter(chatID int64, mode string) ([]string, error) {
	b.userStates[chatID].waitingFor = ""
	rec := model.PileDrivingRecordLine{}
	b.initPileWithCurrentPileField(chatID, &rec)
	rec.RecordedBy = b.userStates[chatID].userName

	b.userStates[chatID].pdrRec = rec
	filter := model.PileFilter{}
	filter.ProjectId = rec.ProjectId
	filter.PileFieldId = rec.PileFieldId
	filter.RecordedBy = new(string)
	*filter.RecordedBy = rec.RecordedBy
	switch mode {
	case bm.PilesAll:
		filter.Status = 30
	case bm.PilesNew:
		filter.Status = 10
	case bm.PilesNoFPH:
		filter.FactPileHead = new(int)
		*filter.FactPileHead = 0
		filter.Status = 20
	case bm.PilesLoggedToday:
		now := time.Now()
		filter.StartDate = new(time.Time)
		*filter.StartDate = time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.UTC)
		filter.Status = 20
	case bm.PilesLoggedYesterday:
		now := time.Now()
		filter.StartDate = new(time.Time)
		*filter.StartDate = time.Date(now.Year(), now.Month(), now.Day()-1, 0, 0, 0, 0, time.UTC)
		filter.Status = 20
	}
	piles, err := b.ws.GetPiles(filter)
	if err != nil {
		return nil, err
	}
	return piles, nil
}

func (b *TgBot) newInlineKb(chatID int64, kb *tgbotapi.InlineKeyboardMarkup, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = kb
	if _, err := b.bot.Send(msg); err != nil {
		log.Panic(err)
	}
}

func (b *TgBot) processCommand(chatID int64, text string) {
	switch text {
	case "/start":
		b.showPilesMenu(chatID)
	default:
		b.processUserInput(chatID, text)
	}
}

func (b *TgBot) processUserInput(chatID int64, text string) {
	switch b.userStates[chatID].waitingFor {
	case bm.WaitPileUpdateFPH:
		b.onAfterPileUpdateFPH(chatID, text)
	case bm.WaitPileNumberInput:
		b.onAfterPileNumberInput(chatID, text)
	case bm.WaitPileNumberRange:
		b.onAfterPileNumberRangeInput(chatID, text)
	default:
		b.sendMessage(chatID, fmt.Sprintf("Debug: %s, %s", b.userStates[chatID].waitingFor, text))
	}
}

func (b *TgBot) processCallbackQuery(chatID int64, data string) {
	switch data {
	case bm.PilesAll,
		bm.PilesNew,
		bm.PilesNoFPH,
		bm.PilesLoggedToday,
		bm.PilesLoggedYesterday:
		b.startPileSelection(chatID, data)
	case bm.PileOpsBack:
		b.showPilesMenu(chatID)
	case bm.PileGetByNumber, bm.PileOpsInsertRange:
		b.onBeforePileNumberInput(chatID, data)
	default:
		switch b.userStates[chatID].waitingFor {
		case bm.WaitPileNumber:
			b.makePileSelectionMenu(chatID, data)
		case bm.WaitPileNumberRange:
		case bm.WaitPileOperation:
			switch data {
			case bm.PileOpsUpdateFPH:
				b.onBeforePileUpdateFPH(chatID)
			case bm.PileOpsInsert:
				b.insertOrUpdatePile(chatID)
			}
		case bm.WaitPileUpdateFPH:
			b.onAfterPileUpdateFPH(chatID, data)
		case bm.WaitPileStartDate:
			b.onAfterStartDateSelect(chatID, data)
		case bm.WaitPilesRangeStartDate:
			b.onAfterPilesRangeStartDateSelect(chatID, data)
		}
	}
}

func (b *TgBot) processCallbackQueryWithAlert(chatID int64, data string, callback *tgbotapi.CallbackQuery) {
	switch data {
	case bm.PilesSendExcel:
		b.sendPdrLog(chatID, callback)
	}
}

func (b *TgBot) getUserState(chatID int64, tgUser *tgbotapi.User) {
	if _, ok := b.userStates[chatID]; !ok {
		b.userStates[chatID] = &UserState{}
	}
	b.userStates[chatID].projectID = 1
	b.userStates[chatID].pileFieldID = 1
	if b.userStates[chatID].userName == "" {
		var err error
		var u *model.User
		u, err = b.ws.GetUserSetup(chatID)
		if err != nil {
			panic(err)
		}
		if u == nil {
			u = new(model.User)
			u.LastName = tgUser.LastName
			u.FirstName = tgUser.FirstName
			u.Initials = tgUser.FirstName
			u.TgUserId = chatID
			b.debugPrint(fmt.Sprintf("hello new user: %v", u))
		}
		b.userStates[chatID].user = *u
		b.userStates[chatID].userName = fmt.Sprintf("%s %s", u.LastName, u.Initials)
	}
}

func (b *TgBot) makePileSelectionMenu(chatID int64, data string) {
	if b.userStates[chatID].waitingFor == bm.WaitPileNumber {
		b.userStates[chatID].menu.BuildMenuOrHandleSelection(data)
	} else {
		b.userStates[chatID].menu.BuildMenuOrHandleSelection(nil)
	}
	if !b.userStates[chatID].menu.SingleItemSelected() {
		kb := b.userStates[chatID].menu.GetTgKeyboardMenu()
		b.newInlineKb(chatID, &kb, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–∞–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
		return
	}
	b.updatePileRec(chatID, data)
	b.showPileInfo(chatID, "–í—ã–±—Ä–∞–Ω–∞ —Å–≤–∞—è:")
	b.showPileOperationsMenu(chatID)
	b.userStates[chatID].waitingFor = bm.WaitPileOperation
}

func (b *TgBot) initPileWithCurrentPileField(chatID int64, pile *model.PileDrivingRecordLine) {
	pile.ProjectId = b.userStates[chatID].projectID
	pile.PileFieldId = b.userStates[chatID].pileFieldID
}

func (b *TgBot) getPileRec(chatID int64, pile_no string) *model.PileDrivingRecordLine {
	filter := model.PileFilter{}
	filter.ProjectId = b.userStates[chatID].pdrRec.ProjectId
	filter.PileFieldId = b.userStates[chatID].pdrRec.PileFieldId
	filter.PileNumber = new(string)
	*filter.PileNumber = pile_no
	p, err := b.ws.GetPile(filter)
	if err != nil {
		panic(err)
	}
	return p
}

func (b *TgBot) updatePileRec(chatID int64, pile_no string) {
	b.userStates[chatID].pdrRec = *b.getPileRec(chatID, pile_no)
}

func (b *TgBot) makePileInfoText(chatID int64, title string) string {
	p := b.userStates[chatID].pdrRec
	infoText := ""
	switch p.Status {
	case 10:
		infoText = "–ù–æ–º–µ—Ä —Å–≤–∞–∏: %s\n–°—Ç–∞—Ç—É—Å: –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ"
		infoText = fmt.Sprintf(infoText, p.PileNumber)
	case 20:
		infoText = "–ù–æ–º–µ—Ä —Å–≤–∞–∏: %s\n" +
			"–°—Ç–∞—Ç—É—Å: –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ;\n" +
			"–î–∞—Ç–∞ –∑–∞–±–∏–≤–∫–∏: %s;\n" +
			"–§–∞–∫—Ç. –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–∞ –≥–æ–ª–æ–≤—ã: %d;\n" +
			"–û–ø–µ—Ä–∞—Ç–æ—Ä: %s;\n"
		infoText = fmt.Sprintf(infoText,
			p.PileNumber,
			p.StartDate.Format(time.DateOnly),
			p.FactPileHead,
			p.RecordedBy)
		if !p.CreatedAt.IsZero() {
			infoText = fmt.Sprintf("%s–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: %s;\n", infoText, p.CreatedAt.Format(time.DateTime))
		}
		if !p.UpdatedAt.IsZero() {
			infoText = fmt.Sprintf("%s–î–∞—Ç–∞ –∏–∑–º.: %s\n", infoText, p.UpdatedAt.Format(time.DateTime))
		}
	}
	if title != "" {
		infoText = fmt.Sprintf("%s\n%s", title, infoText)
	}
	return infoText
}

func (b *TgBot) showPileInfo(chatID int64, title string) {
	b.sendMessage(chatID, b.makePileInfoText(chatID, title))
}

func (b *TgBot) onBeforePileNumberInput(chatID int64, data string) {
	piles, err := b.getPilesByFilter(chatID, bm.PilesAll)
	if err != nil {
		panic(err)
	}
	if len(piles) == 0 {
		b.sendMessage(chatID, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–≤–∞–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏")
		return
	}
	b.userStates[chatID].menu = *bm.NewDynamicMenu(piles)
	switch data {
	case bm.PileGetByNumber:
		b.userStates[chatID].waitingFor = bm.WaitPileNumberInput
		b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–∞–∏:")
	case bm.PileOpsInsertRange:
		b.userStates[chatID].waitingFor = bm.WaitPileNumberRange
		b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–∞–∏ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
	}
}

func (b *TgBot) onAfterPileNumberInput(chatID int64, text string) {
	if !b.userStates[chatID].menu.Contains(text) {
		b.sendMessage(chatID, "–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–≤–∞–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–∞–π–Ω–æ–º –ø–æ–ª–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑:")
		return
	}
	b.updatePileRec(chatID, text)
	b.showPileInfo(chatID, "–í—ã–±—Ä–∞–Ω–∞ —Å–≤–∞—è:")
	b.showPileOperationsMenu(chatID)
	b.userStates[chatID].waitingFor = bm.WaitPileOperation
}

func (b *TgBot) onAfterPileNumberRangeInput(chatID int64, text string) {
	var failed bool
	r := pileRange{}
	piles := strings.Fields(text)
	if len(piles) != 2 {
		b.sendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–∞–∏ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
		return
	}
	r.from.PileNumber = piles[0]
	r.to.PileNumber = piles[1]
	if !b.userStates[chatID].menu.Contains(r.from.PileNumber) {
		b.sendMessage(chatID, fmt.Sprintf("–ù–æ–º–µ—Ä —Å–≤–∞–∏ %s –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–∞–π–Ω–æ–º –ø–æ–ª–µ. –í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –µ—â–µ —Ä–∞–∑:", r.from.PileNumber))
		failed = true
	}
	if !b.userStates[chatID].menu.Contains(r.to.PileNumber) {
		b.sendMessage(chatID, fmt.Sprintf("–ù–æ–º–µ—Ä —Å–≤–∞–∏ %s –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–≤–∞–π–Ω–æ–º –ø–æ–ª–µ. –í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –µ—â–µ —Ä–∞–∑:", r.to.PileNumber))
		failed = true
	}
	if failed {
		return
	}

	if r.from.PileNumber == r.to.PileNumber {
		b.sendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–∞–∏ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
		return
	}

	b.userStates[chatID].pdrRange = r
	if !b.validatePileNumberRange(chatID) {
		return
	}

	b.showPileStartDateMenu(chatID)
	b.userStates[chatID].waitingFor = bm.WaitPilesRangeStartDate
}

func (b *TgBot) validatePileNumberRange(chatID int64) bool {
	piles, err := b.userStates[chatID].menu.GetRange(
		b.userStates[chatID].pdrRange.from.PileNumber,
		b.userStates[chatID].pdrRange.to.PileNumber)
	if err != nil {
		panic(err)
	}
	var loggedPiles []string
	for _, n := range piles {
		p := b.getPileRec(chatID, n)
		if p.Status != 10 {
			loggedPiles = append(loggedPiles, p.PileNumber)
		}
	}
	ln := len(loggedPiles)
	if ln != 0 {
		if ln == 1 {
			b.sendMessage(chatID, fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–º–µ–µ—Ç—Å—è –∑–∞–±–∏—Ç–∞—è —Å–≤–∞—è —Å –Ω–æ–º–µ—Ä–æ–º %s "+
				"–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏—Å–∫–ª—é—á–∞—é—â–∞—é –¥–∞–Ω–Ω—É—é —Å–≤–∞—é:", loggedPiles[0]))
		} else {
			b.sendMessage(chatID, fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–º–µ—é—Ç—Å—è –∑–∞–±–∏—Ç—ã–µ —Å–≤–∞–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ %d —à—Ç, "+
				"–ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª. –Ω–æ–º–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã—Ö %s –∏ %s —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. "+
				"–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏—Å–∫–ª—é—á–∞—é—â–∞—é –¥–∞–Ω–Ω—ã–µ —Å–≤–∞–∏:", ln, loggedPiles[0], loggedPiles[ln-1]))
		}
		return false
	}
	return true
}

func (b *TgBot) onBeforePileUpdateFPH(chatID int64) {
	p := b.userStates[chatID].pdrRec
	promt := ""
	if p.FactPileHead == 0 {
		promt = "–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –§–û–í–ì —Å–≤–∞–∏ (–≤ –º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 10720):"
	} else {
		promt = fmt.Sprintf("–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏–µ –§–û–í–ì %d –º–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–º):", p.FactPileHead)
	}
	b.sendMessage(chatID, promt)
	b.userStates[chatID].waitingFor = bm.WaitPileUpdateFPH
}

func (b *TgBot) onAfterPileUpdateFPH(chatID int64, data string) {
	num, err := strconv.Atoi(data)
	if err != nil {
		b.sendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–û–í–ì. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–º ):")
		return
	}
	b.userStates[chatID].pdrRec.FactPileHead = num
	b.insertOrUpdatePile(chatID)
}

func (b *TgBot) onAfterStartDateSelect(chatID int64, data string) {
	b.userStates[chatID].pdrRec.StartDate = b.makeStartDate(data)
	b.userStates[chatID].pdrRec.RecordedBy = b.userStates[chatID].userName
	b.insertOrUpdatePile(chatID)
	b.userStates[chatID].waitingFor = ""
}

func (b *TgBot) onAfterPilesRangeStartDateSelect(chatID int64, data string) {
	if !b.validatePileNumberRange(chatID) {
		return
	}
	sd := b.makeStartDate(data)
	pilesNo, err := b.userStates[chatID].menu.GetRange(
		b.userStates[chatID].pdrRange.from.PileNumber,
		b.userStates[chatID].pdrRange.to.PileNumber)
	if err != nil {
		panic(err)
	}
	var piles []model.PileDrivingRecordLine
	for _, n := range pilesNo {
		p := b.getPileRec(chatID, n)
		p.StartDate = sd
		p.RecordedBy = b.userStates[chatID].userName
		if p.Status == 10 {
			piles = append(piles, *p)
		}
	}
	ln := len(piles)
	if ln == 0 {
		panic("no piles range to insert")
	}
	for _, p := range piles {
		if err := b.ws.InsertOrUpdatePdrLine(&p); err != nil {
			panic(err)
		}
	}
	b.sendMessage(chatID, fmt.Sprintf("–î–∞–Ω–Ω—ã–µ –ø–æ %d —Å–≤–∞—è–º –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∂—É—Ä–Ω–∞–ª", len(piles)))
	b.userStates[chatID].waitingFor = ""
	b.debugPrint(fmt.Sprintf("range inserted. chatID: %d; %s", chatID, b.userStates[chatID].userName))
}

func (b *TgBot) makeStartDate(data string) time.Time {
	sd := time.Now()
	switch data {
	case bm.PileOpsStartDateYesterday:
		sd = time.Date(sd.Year(), sd.Month(), sd.Day()-1, 0, 0, 0, 0, time.UTC)
	case bm.PileOpsStartDateToday:
	default:
		panic("start date selection error: nor today neither yesterday")
	}
	return sd
}

func (b *TgBot) insertOrUpdatePile(chatID int64) {
	if b.userStates[chatID].pdrRec.StartDate.IsZero() {
		b.showPileStartDateMenu(chatID)
		b.userStates[chatID].waitingFor = bm.WaitPileStartDate
		return
	}
	if err := b.ws.InsertOrUpdatePdrLine(&b.userStates[chatID].pdrRec); err != nil {
		panic(err)
	}
	b.userStates[chatID].pdrRec.Status = 20
	b.showAfterUpdatePdrLineMenu(chatID)
	b.debugPrint(fmt.Sprintf("pile inserted/updated. chatID: %d; %v", chatID, b.userStates[chatID].pdrRec))
}

func (b *TgBot) sendPdrLog(chatID int64, callback *tgbotapi.CallbackQuery) {
	b.debugPrint(fmt.Sprintf("sending excel. chatID: %d; %s", chatID, b.userStates[chatID].userName))
	if b.userStates[chatID].user.Email == "" {
		b.createAlert(callback, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ Excel –∂—É—Ä–Ω–∞–ª–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		return
	}
	if err := b.ws.SendPdrLog(b.userStates[chatID].pdrRec.ProjectId, chatID); err != nil {
		panic(err)
	}
	b.createAlert(callback, "–§–∞–π–ª Excel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–∏–π email")
	b.userStates[chatID].waitingFor = ""
}

func (b *TgBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.bot.Send(msg)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
	}
}

func (b *TgBot) createAlert(callback *tgbotapi.CallbackQuery, text string) {
	alert := tgbotapi.NewCallbackWithAlert(callback.ID, text)
	alert.ShowAlert = true
	if _, err := b.bot.Request(alert); err != nil {
		panic(fmt.Errorf("callback with alert error: %v", err))
	}
}

func (b *TgBot) debugPrint(text string) {
	if b.debugChatId == 0 {
		return
	}
	b.sendMessage(b.debugChatId, fmt.Sprintf("%s>> %s", time.Now().Format(time.DateTime), text))
}

func (b *TgBot) setDebug(debugMode bool) {
	b.bot.Debug = debugMode
	if debugMode {
		text := os.Getenv("DEBUGCHATID")
		chatId, err := strconv.ParseInt(text, 10, 64)
		if err != nil {
			log.Println(err)
			return
		}
		b.debugChatId = chatId
	}
}
